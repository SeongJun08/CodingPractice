#include <iostream>

struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(nullptr), right(nullptr) {}
};

class Box
{
public:

    int count = 0;
    int reuslt = -1;

    void check(TreeNode *root, int k)
    {
        if (root == nullptr) return;

        check(root->left, k);

        count++;

        if (count == k)
        {
            reuslt = root->val;
            return;
        }

        check(root->right, k);
    }

    int KthSmallestInBST(TreeNode *root, int k)
    {
        check(root, k);
        return reuslt;
    }
};


int main()
{
    TreeNode *root = new TreeNode(3);
    root->left = new TreeNode(1);
    root->right = new TreeNode(4);
    root->left->right = new TreeNode(2);

    Box box;
    int k = 1;
    int result = box.KthSmallestInBST(root, k);

    std::cout << result << std::endl;
}
